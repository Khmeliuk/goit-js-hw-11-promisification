{"version":3,"sources":["partials/firstTask.js","partials/secondTask.js","partials/thirdTask.js","index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","canProcess","res","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AACA,MAAMA,EAAQC,GAEL,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KAAQF,EAAQF,OAIzBK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ;;ACZjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC5B,IAAId,QAAQ,CAACC,EAASC,KAEzBD,EAF0DY,EAASE,IAAIC,GACvEA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAI3DZ,EAASH,GAAWK,QAAQW,MAAMhB,GAWxCW,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC1BnC,MAAMc,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,GAEhB,IAAIzB,QAAQ,CAACC,EAASC,KACrBJ,MAAAA,EAAQoB,EAA0B,IAAK,KAC7Cf,WAAW,KAIPuB,GAFeL,KAAKE,SAAW,GAGnC,CACQI,MAAAA,EAAM,CAAEC,GAAIH,EAAYG,GAAIvB,KAAMP,GACtCG,EAAQ0B,QAKZzB,EAAOuB,EAAYG,KAGlB9B,KAIC+B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAa/CJ,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH;;ACxDT,aAHA,QAAA,oBACA,QAAA,wBACA,QAAA,yBACA,QAAA","file":"src.38533ab4.js","sourceRoot":"../src","sourcesContent":["\nconst delay = ms => {\n  // Твій код\n  return new Promise((resolve, reject) => {\n    setTimeout(() => { resolve(ms) }),ms\n  } );\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Виклич функції для перевірки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\nreturn new Promise((resolve, reject) => {const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );resolve(updatedUsers);})\n};\n\nconst logger = resolve => console.table(resolve);\n\n/*\n * Сейчас работает так\n//  */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  \n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    setTimeout(() => {\n     \n    const canProcess = Math.random() > 0.3;\n      \n    if (canProcess) \n    {\n      const res = { id: transaction.id, time: delay }\n        resolve(res);\n    }\n     \n     \n   else\n    reject(transaction.id);\n       \n    \n  }, delay);})\n  \n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n\n ","import './sass/main.scss';\nimport './partials/firstTask';\nimport './partials/secondTask';\nimport './partials/thirdTask';"]}